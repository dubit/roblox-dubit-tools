return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local AllocationPool = require(ReplicatedStorage.Packages.AllocationPool)

	describe("AllocationPool", function()
		describe("CreatePoolAsync", function()
			it("should create a new pool with specified limit", function()
				AllocationPool.CreatePoolAsync("TestPool", 10):expect()
				local limit = AllocationPool.GetPoolLimitAsync("TestPool"):expect()
				expect(limit).to.equal(10)
			end)
		end)

		describe("UpdatePoolLimitAsync", function()
			it("should update existing pool limit", function()
				AllocationPool.CreatePoolAsync("UpdatePool", 5):expect()
				AllocationPool.UpdatePoolLimitAsync("UpdatePool", 15):expect()
				local limit = AllocationPool.GetPoolLimitAsync("UpdatePool"):expect()
				expect(limit).to.equal(15)
			end)
		end)

		describe("GetPoolReserveAsync", function()
			it("should return correct remaining allocations", function()
				AllocationPool.CreatePoolAsync("ReservePool", 10):expect()
				local reserve = AllocationPool.GetPoolReserveAsync("ReservePool"):expect()
				expect(reserve).to.equal(10)
			end)
		end)

		describe("GetPoolCountAsync", function()
			it("should return correct consumption count", function()
				AllocationPool.CreatePoolAsync("CountPool", 10):expect()
				local count = AllocationPool.GetPoolCountAsync("CountPool"):expect()
				expect(count).to.equal(0)
			end)
		end)

		describe("ResetPoolAsync", function()
			it("should reset pool consumption to zero", function()
				AllocationPool.CreatePoolAsync("ResetPool", 10):expect()
				AllocationPool.ConsumePoolAsync(nil, "ResetPool"):expect()
				AllocationPool.ResetPoolAsync("ResetPool"):expect()
				local count = AllocationPool.GetPoolCountAsync("ResetPool"):expect()
				expect(count).to.equal(0)
			end)
		end)

		describe("ConsumePoolAsync", function()
			it("should consume pool allocation", function()
				AllocationPool.CreatePoolAsync("ConsumePool", 5):expect()
				AllocationPool.ResetPoolAsync("ConsumePool"):expect()
				AllocationPool.ConsumePoolAsync(nil, "ConsumePool"):expect()
				local count = AllocationPool.GetPoolCountAsync("ConsumePool"):expect()
				expect(count).to.equal(1)
			end)

			it("should fail when pool limit is exceeded", function()
				AllocationPool.CreatePoolAsync("LimitPool", 1):expect()
				AllocationPool.ResetPoolAsync("LimitPool"):expect()
				AllocationPool.ConsumePoolAsync(nil, "LimitPool"):expect()
				expect(function()
					AllocationPool.ConsumePoolAsync(nil, "LimitPool"):expect()
				end).to.throw()
			end)
		end)

		describe("HasConsumedAsync", function()
			it("should track player consumption correctly", function()
				local mockPlayer = {
					ClassName = "Player",
					UserId = 123,
				}
				AllocationPool.CreatePoolAsync("PlayerPool", 5):expect()
				AllocationPool.ConsumePoolAsync(mockPlayer, "PlayerPool"):expect()
				local hasConsumed = AllocationPool.HasConsumedAsync(mockPlayer, "PlayerPool"):expect()
				expect(hasConsumed).to.equal(true)
			end)
		end)
	end)
end
